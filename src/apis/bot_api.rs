/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */
use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method `activate_bot`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ActivateBotError {
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `change_bot_icon`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChangeBotIconError {
    Status400(),
    Status403(),
    Status404(),
    Status413(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_bot`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateBotError {
    Status400(),
    Status409(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_bot`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteBotError {
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `edit_bot`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EditBotError {
    Status400(),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_bot`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBotError {
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_bot_icon`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBotIconError {
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_bot_logs`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBotLogsError {
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_bots`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBotsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_channel_bots`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetChannelBotsError {
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `inactivate_bot`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InactivateBotError {
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `let_bot_join_channel`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LetBotJoinChannelError {
    Status400(),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `let_bot_leave_channel`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LetBotLeaveChannelError {
    Status400(),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `reissue_bot`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReissueBotError {
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
pub async fn activate_bot(
    configuration: &configuration::Configuration,
    bot_id: &str,
) -> Result<(), Error<ActivateBotError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/bots/{botId}/actions/activate",
        configuration.base_path,
        botId = bot_id
    );
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<ActivateBotError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
pub async fn change_bot_icon(
    configuration: &configuration::Configuration,
    bot_id: &str,
    file: std::path::PathBuf,
) -> Result<(), Error<ChangeBotIconError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/bots/{botId}/icon",
        configuration.base_path,
        botId = bot_id
    );
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form = reqwest::multipart::Form::new();
    // TODO: support file upload for 'file' parameter
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<ChangeBotIconError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// BOTを作成します。 作成後にアクティベーション・購読イベントの設定を行う必要があります。
pub async fn create_bot(
    configuration: &configuration::Configuration,
    post_bot_request: Option<crate::models::PostBotRequest>,
) -> Result<crate::models::BotDetail, Error<CreateBotError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/bots", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&post_bot_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateBotError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
pub async fn delete_bot(
    configuration: &configuration::Configuration,
    bot_id: &str,
) -> Result<(), Error<DeleteBotError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/bots/{botId}", configuration.base_path, botId = bot_id);
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteBotError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
pub async fn edit_bot(
    configuration: &configuration::Configuration,
    bot_id: &str,
    patch_bot_request: Option<crate::models::PatchBotRequest>,
) -> Result<(), Error<EditBotError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/bots/{botId}", configuration.base_path, botId = bot_id);
    let mut local_var_req_builder = local_var_client.patch(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&patch_bot_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<EditBotError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

// /// 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
// pub async fn get_bot(
//     configuration: &configuration::Configuration,
//     bot_id: &str,
//     detail: Option<bool>,
// ) -> Result<crate::models::OneOfBotBotDetail, Error<GetBotError>> {
//     let local_var_client = &configuration.client;

//     let local_var_uri_str = format!("{}/bots/{botId}", configuration.base_path, botId = bot_id);
//     let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

//     if let Some(ref local_var_str) = detail {
//         local_var_req_builder =
//             local_var_req_builder.query(&[("detail", &local_var_str.to_string())]);
//     }
//     if let Some(ref local_var_user_agent) = configuration.user_agent {
//         local_var_req_builder =
//             local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
//     }
//     if let Some(ref local_var_token) = configuration.oauth_access_token {
//         local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
//     };

//     let local_var_req = local_var_req_builder.build()?;
//     let local_var_resp = local_var_client.execute(local_var_req).await?;

//     let local_var_status = local_var_resp.status();
//     let local_var_content = local_var_resp.text().await?;

//     if local_var_status.is_success() {
//         serde_json::from_str(&local_var_content).map_err(Error::from)
//     } else {
//         let local_var_entity: Option<GetBotError> = serde_json::from_str(&local_var_content).ok();
//         let local_var_error = ResponseContent {
//             status: local_var_status,
//             content: local_var_content,
//             entity: local_var_entity,
//         };
//         Err(Error::ResponseError(local_var_error))
//     }
// }

/// 指定したBOTのアイコン画像を取得を取得します。
pub async fn get_bot_icon(
    configuration: &configuration::Configuration,
    bot_id: &str,
) -> Result<std::path::PathBuf, Error<GetBotIconError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/bots/{botId}/icon",
        configuration.base_path,
        botId = bot_id
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBotIconError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
pub async fn get_bot_logs(
    configuration: &configuration::Configuration,
    bot_id: &str,
    limit: Option<i32>,
    offset: Option<i32>,
) -> Result<Vec<crate::models::BotEventLog>, Error<GetBotLogsError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/bots/{botId}/logs",
        configuration.base_path,
        botId = bot_id
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder =
            local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBotLogsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
pub async fn get_bots(
    configuration: &configuration::Configuration,
    all: Option<bool>,
) -> Result<Vec<crate::models::Bot>, Error<GetBotsError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/bots", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = all {
        local_var_req_builder = local_var_req_builder.query(&[("all", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetBotsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 指定したチャンネルに参加しているBOTのリストを取得します。
pub async fn get_channel_bots(
    configuration: &configuration::Configuration,
    channel_id: &str,
) -> Result<Vec<crate::models::BotUser>, Error<GetChannelBotsError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/channels/{channelId}/bots",
        configuration.base_path,
        channelId = channel_id
    );
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetChannelBotsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
pub async fn inactivate_bot(
    configuration: &configuration::Configuration,
    bot_id: &str,
) -> Result<(), Error<InactivateBotError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/bots/{botId}/actions/inactivate",
        configuration.base_path,
        botId = bot_id
    );
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<InactivateBotError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
pub async fn let_bot_join_channel(
    configuration: &configuration::Configuration,
    bot_id: &str,
    post_bot_action_join_request: Option<crate::models::PostBotActionJoinRequest>,
) -> Result<(), Error<LetBotJoinChannelError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/bots/{botId}/actions/join",
        configuration.base_path,
        botId = bot_id
    );
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&post_bot_action_join_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<LetBotJoinChannelError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
pub async fn let_bot_leave_channel(
    configuration: &configuration::Configuration,
    bot_id: &str,
    post_bot_action_leave_request: Option<crate::models::PostBotActionLeaveRequest>,
) -> Result<(), Error<LetBotLeaveChannelError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/bots/{botId}/actions/leave",
        configuration.base_path,
        botId = bot_id
    );
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&post_bot_action_leave_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<LetBotLeaveChannelError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
pub async fn reissue_bot(
    configuration: &configuration::Configuration,
    bot_id: &str,
) -> Result<crate::models::BotTokens, Error<ReissueBotError>> {
    let local_var_client = &configuration.client;

    let local_var_uri_str = format!(
        "{}/bots/{botId}/actions/reissue",
        configuration.base_path,
        botId = bot_id
    );
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ReissueBotError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
