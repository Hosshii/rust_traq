/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// BotDetail : BOT詳細情報



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BotDetail {
    /// BOT UUID
    #[serde(rename = "id")]
    pub id: String,
    /// 更新日時
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    /// 作成日時
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "state")]
    pub state: crate::models::BotState,
    /// BOTが購読しているイベントの配列
    #[serde(rename = "subscribeEvents")]
    pub subscribe_events: Vec<String>,
    /// BOT開発者UUID
    #[serde(rename = "developerId")]
    pub developer_id: String,
    /// 説明
    #[serde(rename = "description")]
    pub description: String,
    /// BOTユーザーUUID
    #[serde(rename = "botUserId")]
    pub bot_user_id: String,
    #[serde(rename = "tokens")]
    pub tokens: crate::models::BotTokens,
    /// BOTサーバーエンドポイント
    #[serde(rename = "endpoint")]
    pub endpoint: String,
    /// 特権BOTかどうか
    #[serde(rename = "privileged")]
    pub privileged: bool,
    /// BOTが参加しているチャンネルのUUID配列
    #[serde(rename = "channels")]
    pub channels: Vec<String>,
}

impl BotDetail {
    /// BOT詳細情報
    pub fn new(id: String, updated_at: String, created_at: String, state: crate::models::BotState, subscribe_events: Vec<String>, developer_id: String, description: String, bot_user_id: String, tokens: crate::models::BotTokens, endpoint: String, privileged: bool, channels: Vec<String>) -> BotDetail {
        BotDetail {
            id,
            updated_at,
            created_at,
            state,
            subscribe_events,
            developer_id,
            description,
            bot_user_id,
            tokens,
            endpoint,
            privileged,
            channels,
        }
    }
}


