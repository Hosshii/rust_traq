/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// ChannelEvent : チャンネルイベント

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChannelEvent {
    /// イベントタイプ
    #[serde(rename = "type")]
    pub _type: Type,
    /// イベント日時
    #[serde(rename = "datetime")]
    pub datetime: String,
    /// イベント内容
    #[serde(rename = "detail")]
    pub detail: crate::models::OneOfTopicChangedEventSubscribersChangedEventPinAddedEventPinRemovedEventNameChangedEventParentChangedEventVisibilityChangedEventForcedNotificationChangedEventChildCreatedEvent,
}

impl ChannelEvent {
    /// チャンネルイベント
    pub fn new(
        _type: Type,
        datetime: String,
        detail: crate::models::OneOfTopicChangedEventSubscribersChangedEventPinAddedEventPinRemovedEventNameChangedEventParentChangedEventVisibilityChangedEventForcedNotificationChangedEventChildCreatedEvent,
    ) -> ChannelEvent {
        ChannelEvent {
            _type,
            datetime,
            detail,
        }
    }
}

/// イベントタイプ
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "TopicChanged")]
    TopicChanged,
    #[serde(rename = "SubscribersChanged")]
    SubscribersChanged,
    #[serde(rename = "PinAdded")]
    PinAdded,
    #[serde(rename = "PinRemoved")]
    PinRemoved,
    #[serde(rename = "NameChanged")]
    NameChanged,
    #[serde(rename = "ParentChanged")]
    ParentChanged,
    #[serde(rename = "VisibilityChanged")]
    VisibilityChanged,
    #[serde(rename = "ForcedNotificationChanged")]
    ForcedNotificationChanged,
    #[serde(rename = "ChildCreated")]
    ChildCreated,
}
