/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OAuth2Authorization {
    #[serde(rename = "response_type", skip_serializing_if = "Option::is_none")]
    pub response_type: Option<crate::models::OAuth2ResponseType>,
    #[serde(rename = "client_id")]
    pub client_id: String,
    #[serde(rename = "redirect_uri", skip_serializing_if = "Option::is_none")]
    pub redirect_uri: Option<String>,
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "code_challenge", skip_serializing_if = "Option::is_none")]
    pub code_challenge: Option<String>,
    #[serde(rename = "code_challenge_method", skip_serializing_if = "Option::is_none")]
    pub code_challenge_method: Option<String>,
    #[serde(rename = "nonce", skip_serializing_if = "Option::is_none")]
    pub nonce: Option<String>,
    #[serde(rename = "prompt", skip_serializing_if = "Option::is_none")]
    pub prompt: Option<crate::models::OAuth2Prompt>,
}

impl OAuth2Authorization {
    pub fn new(client_id: String) -> OAuth2Authorization {
        OAuth2Authorization {
            response_type: None,
            client_id,
            redirect_uri: None,
            scope: None,
            state: None,
            code_challenge: None,
            code_challenge_method: None,
            nonce: None,
            prompt: None,
        }
    }
}


